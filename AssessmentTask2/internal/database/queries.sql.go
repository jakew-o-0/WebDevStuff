// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"
)

const createAttraction = `-- name: CreateAttraction :exec
INSERT INTO attractions (
    title,
    content
) VALUES (?,?)
`

type CreateAttractionParams struct {
	Title   string
	Content string
}

func (q *Queries) CreateAttraction(ctx context.Context, arg CreateAttractionParams) error {
	_, err := q.db.ExecContext(ctx, createAttraction, arg.Title, arg.Content)
	return err
}

const createFacility = `-- name: CreateFacility :exec
INSERT INTO facilities (
    title,
    content
) VALUES (?,?)
`

type CreateFacilityParams struct {
	Title   string
	Content string
}

func (q *Queries) CreateFacility(ctx context.Context, arg CreateFacilityParams) error {
	_, err := q.db.ExecContext(ctx, createFacility, arg.Title, arg.Content)
	return err
}

const createFactFile = `-- name: CreateFactFile :exec
INSERT INTO learning_content (
    name,
    description,
    habitat,
    diet,
    conservation_status
) VALUES (?,?,?,?,?)
`

type CreateFactFileParams struct {
	Name               string
	Description        string
	Habitat            string
	Diet               string
	ConservationStatus string
}

func (q *Queries) CreateFactFile(ctx context.Context, arg CreateFactFileParams) error {
	_, err := q.db.ExecContext(ctx, createFactFile,
		arg.Name,
		arg.Description,
		arg.Habitat,
		arg.Diet,
		arg.ConservationStatus,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    first_name,
    last_name,
    email,
    password
)
VALUES (?,?,?,?)
`

type CreateUserParams struct {
	FirstName string
	LastName  string
	Email     string
	Password  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	return err
}

const getLearingContent = `-- name: GetLearingContent :many
SELECT learning_content_id, name, description, habitat, diet, conservation_status
FROM learning_content
WHERE name LIKE ?
`

func (q *Queries) GetLearingContent(ctx context.Context, name string) ([]LearningContent, error) {
	rows, err := q.db.QueryContext(ctx, getLearingContent, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LearningContent
	for rows.Next() {
		var i LearningContent
		if err := rows.Scan(
			&i.LearningContentID,
			&i.Name,
			&i.Description,
			&i.Habitat,
			&i.Diet,
			&i.ConservationStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, first_name, last_name, email, password
FROM users 
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserID = `-- name: GetUserID :one
SELECT user_id
FROM users
WHERE email = ?
`

func (q *Queries) GetUserID(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserID, email)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const pageAttractions = `-- name: PageAttractions :many
SELECT attraction_id, title, content
FROM attractions
WHERE attraction_id > ?
LIMIT 10
`

func (q *Queries) PageAttractions(ctx context.Context, attractionID int64) ([]Attraction, error) {
	rows, err := q.db.QueryContext(ctx, pageAttractions, attractionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attraction
	for rows.Next() {
		var i Attraction
		if err := rows.Scan(&i.AttractionID, &i.Title, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pageFacilities = `-- name: PageFacilities :many
SELECT facility_id, title, content
FROM facilities 
WHERE facility_id > ?
LIMIT 10
`

func (q *Queries) PageFacilities(ctx context.Context, facilityID int64) ([]Facility, error) {
	rows, err := q.db.QueryContext(ctx, pageFacilities, facilityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Facility
	for rows.Next() {
		var i Facility
		if err := rows.Scan(&i.FacilityID, &i.Title, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pageLearngingContent = `-- name: PageLearngingContent :many
SELECT learning_content_id, name, description, habitat, diet, conservation_status 
FROM learning_content
WHERE learning_content_id > ?
LIMIT 10
`

func (q *Queries) PageLearngingContent(ctx context.Context, learningContentID int64) ([]LearningContent, error) {
	rows, err := q.db.QueryContext(ctx, pageLearngingContent, learningContentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LearningContent
	for rows.Next() {
		var i LearningContent
		if err := rows.Scan(
			&i.LearningContentID,
			&i.Name,
			&i.Description,
			&i.Habitat,
			&i.Diet,
			&i.ConservationStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
