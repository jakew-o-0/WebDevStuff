// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (
    title,
    content
) VALUES (?,?)
`

type CreatePostParams struct {
	Title   string
	Content string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost, arg.Title, arg.Content)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    password
) VALUES (?,?)
RETURNING user_id
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const getPosts = `-- name: GetPosts :many
SELECT title,content 
FROM posts
WHERE post_id > ?
LIMIT 10
`

type GetPostsRow struct {
	Title   string
	Content string
}

func (q *Queries) GetPosts(ctx context.Context, postID int64) ([]GetPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsRow
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(&i.Title, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id,username,password
FROM users
WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(&i.UserID, &i.Username, &i.Password)
	return i, err
}
